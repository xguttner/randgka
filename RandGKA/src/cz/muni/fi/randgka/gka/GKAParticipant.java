package cz.muni.fi.randgka.gka;

import java.nio.ByteBuffer;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.X509EncodedKeySpec;
import java.util.Arrays;

import android.util.Base64;
import android.util.Log;

/**
 * Class representing an instance of one protocol participant.
 */
public class GKAParticipant {

	private int id; // identificator
	private boolean me; // does this object represent the present device
	private String name;
	private byte[] address; // MAC or IP address (according to communication channel)
	private GKAParticipantRole role; // participant role
	private byte[] nonce; // random nonce for authentication version
	private PublicKey publicKey; // public key for authentication
	private int pkLen, // public key length
				nonceLen; // nonce length
	
	public GKAParticipant() {
		this.address = new byte[6];
	}
	
	public GKAParticipant(int id, String name, byte[] address, boolean me, GKAParticipantRole role, int nonceLen, int pkLen, byte[] nonce, PublicKey publicKey) {
		this.id = id;
		this.name = name;
		this.address = new byte[6];
		if (address != null) System.arraycopy(address, 0, this.address, 0, address.length);
		this.me = me;
		this.role = role;
		this.nonceLen = nonceLen;
		this.pkLen = pkLen;
		this.nonce = nonce;
		this.publicKey = publicKey;
	}
	
	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}
	
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public boolean isMe() {
		return me;
	}

	public void setMe(boolean me) {
		this.me = me;
	}

	public int getPkLen() {
		return pkLen;
	}

	public void setPkLen(int pkLen) {
		this.pkLen = pkLen;
	}
	
	public byte[] getNonce() {
		return nonce;
	}

	public void setNonce(byte[] nonce) {
		this.nonce = nonce;
	}

	public int getNonceLen() {
		return nonceLen;
	}

	public void setNonceLen(int nonceLen) {
		this.nonceLen = nonceLen;
	}

	public GKAParticipantRole getRole() {
		return role;
	}

	public void setRole(GKAParticipantRole role) {
		this.role = role;
	}
	
	public byte[] getAddress() {
		return address;
	}

	public void setAddress(byte[] address) {
		System.arraycopy(address, 0, this.address, 0, address.length);
	}
	
	public PublicKey getPublicKey() {
		return publicKey;
	}
	public void setPublicKey(PublicKey publicKey) {
		this.publicKey = publicKey;
	}
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + id;
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		GKAParticipant other = (GKAParticipant) obj;
		if (id != other.id)
			return false;
		return true;
	}
	
	@Override
	public String toString() {
		return "GKAParticipant [id=" + id + ", me=" + me + ", role=" + role
				+ ", nonce=" + Arrays.toString(nonce) + ", authPublicKey=" + publicKey
				+ ", pkLen=" + pkLen + ", nonceLen="
				+ nonceLen + "]";
	}
	
	/**
	 * @return byte array suitable for transfer over communication channel
	 */
	public byte[] getTransferObject() {
		byte[] bytes = new byte[getTOLength()];
		
		// participant id
		byte [] intBytes = ByteBuffer.allocate(4).putInt(id).array();
		System.arraycopy(intBytes, 0, bytes, 0, 4);
		
		// participant name length
		intBytes = ByteBuffer.allocate(4).putInt(name.length()).array();
		System.arraycopy(intBytes, 0, bytes, 4, 4);
		
		// participant address
		System.arraycopy(address, 0, bytes, 8, 6);
		
		// participant name
		System.arraycopy(name.getBytes(), 0, bytes, 14, name.length());
		
		// participant random nonce
		System.arraycopy(nonce, 0, bytes, 14+name.length(), nonceLen);
		
		// put public key, if is set
		if (publicKey != null) {
			byte[] pkEnc = Base64.encode(publicKey.getEncoded(), Base64.DEFAULT);
			int pkEncLen = pkEnc.length;
			
			intBytes = ByteBuffer.allocate(4).putInt(pkEncLen).array();
			System.arraycopy(intBytes, 0, bytes, 14+name.length()+nonceLen, 4);
	
			System.arraycopy(pkEnc, 0, bytes, 18+name.length()+nonceLen, pkEncLen);
		} 
		else {
			intBytes = ByteBuffer.allocate(4).putInt(0).array();
			System.arraycopy(intBytes, 0, bytes, 14+name.length()+nonceLen, 4);
		}
		
		return bytes;
	}
	
	/**
	 * @return length of transfer object
	 */
	public int getTOLength() {
		int pkEncLen = (publicKey != null)? Base64.encode(publicKey.getEncoded(), Base64.DEFAULT).length : 0;
		return 4+4+4+6+name.length()+nonceLen+pkEncLen;
	}
	
	/**
	 * @param byte array containg the transfer object generated by getTransferObject()
	 */
	public void fromTransferObject(byte[] bytes) {
		byte [] intBytes = new byte[4];
		
		// participant id 
		System.arraycopy(bytes, 0, intBytes, 0, 4);
		id = ByteBuffer.wrap(intBytes).getInt();
		
		// received participant is by default someone else
		me = false;
		// leader establishes the identificator for itself always to be 0
		role = id == 0 ? GKAParticipantRole.LEADER : GKAParticipantRole.MEMBER;
		
		// participant name length
		System.arraycopy(bytes, 4, intBytes, 0, 4);
		int nameLen = ByteBuffer.wrap(intBytes).getInt();
		
		// participant address
		System.arraycopy(bytes, 8, this.address, 0, 6);
		
		// participant name
		byte[]nameBytes = new byte[nameLen];
		System.arraycopy(bytes, 14, nameBytes, 0, nameLen);
		name = new String(nameBytes);
		
		// participant random nonce
		nonce = new byte[nonceLen];
		System.arraycopy(bytes, 14+nameLen, nonce, 0, nonceLen);
		
		// participant public key length
		System.arraycopy(bytes, 14+nameLen+nonceLen, intBytes, 0, 4);
		int pkEncLen = ByteBuffer.wrap(intBytes).getInt();
		
		try {
			// if public key was set, retrieve it
			if (pkEncLen > 0) {
				byte[] pcBytes = new byte[pkEncLen];
				System.arraycopy(bytes, 18+nameLen+nonceLen, pcBytes, 0, pkEncLen);
				publicKey = KeyFactory.getInstance("RSA", "BC").generatePublic(new X509EncodedKeySpec(Base64.decode(pcBytes, Base64.DEFAULT)));
			}
		} catch (InvalidKeySpecException e) {
			e.printStackTrace();
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		} catch (NoSuchProviderException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * @param macStr MAC address in the format xx:xx:xx:xx:xx:xx
	 * @return byte array containing MAC address in 6 bytes
	 */
	public static byte[] macStringToBytes(String macStr) {
		if (macStr == null) return null;
		String[] macAddressParts = macStr.split(":");

		// convert hex string to byte values
		byte[] macAddressBytes = new byte[6];
		for(int i=0; i<6; i++){
		    Integer hex = Integer.parseInt(macAddressParts[i], 16);
		    macAddressBytes[i] = hex.byteValue();
		}
		return macAddressBytes;
	}
	
	/**
	 * 
	 * @param ipStr ip address in the format xxx.xxx.xxx.xxx
	 * @return byte array containing IP address in 4 bytes
	 */
	public static byte[] ipStringToBytes(String ipStr) {
		if (ipStr == null) return null;
		String[] ipAddressParts = ipStr.split("\\.");

		// convert int string to byte values
		byte[] ipAddressBytes = new byte[4];
		for(int i=0; i<4; i++){
		    Integer integer = Integer.parseInt(ipAddressParts[i]);
		    ipAddressBytes[i] = integer.byteValue();
		}
		
		return ipAddressBytes;
	}
}
